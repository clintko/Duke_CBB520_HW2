{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Generator/Stream of FASTQ reads"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**In this notebook, I am creating and test my scripts to stream the FASTQ reads**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('seaborn-whitegrid')\n",
    "\n",
    "DIR_DAT_RAW  = \"/home/jovyan/work/Data/SRR4841864/rawdata\"\n",
    "DIR_DAT_TRIM = \"/home/jovyan/work/Data/SRR4841864/trimmed_fastqs/\"\n",
    "DIR_CUR      = \"/home/jovyan/work/GitRepo/Duke_CBB520_HW2\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Define my test function to stream the data**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def stream_fastq(fpath):\n",
    "    \"\"\"stream over the given fastq file; yield results by every four lines\"\"\"\n",
    "    with open(fpath, 'r') as fp:\n",
    "        ### initialization\n",
    "        keys = [\"label\", \"seq\", \"label2\", \"qscore\"]\n",
    "        dct  = dict()\n",
    "        \n",
    "        ### iterate through the file\n",
    "        for cnt, line in enumerate(fp):\n",
    "            # yield the results for every four lines and\n",
    "            # reset the dictionary\n",
    "            if (cnt != 0) and (cnt % 4 == 0):\n",
    "                yield dct\n",
    "                dct = dict()\n",
    "                \n",
    "            # process each line and add to a dictionary \n",
    "            idx  = cnt % 4\n",
    "            line = line.strip()\n",
    "            dct[keys[idx]] = line"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**read line by line of FASTQ file**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "====================================================\n",
      "Line  0 : @SRR4841864.1 1 length=101\n",
      "Line  1 : NGGCATACCAATGGGAAGAGCATGCGTGGGAATGGTATTCAAAAATCGAGAAAGAAGGATGCTGCTGCTGCTGCCGCTGTTGGGAAAGCTATAAAGGATGA\n",
      "Line  2 : +SRR4841864.1 1 length=101\n",
      "Line  3 : #1:BDFFFDHFHDGGBBGGHGIGGHEHGIFIHGFDB?FHGHIIIDDGFHGCHIIIIIIIIIHGCCCBBDFDFCCECCCCBCCCBBABBCCCCCCECCCCCC\n",
      "\n",
      "====================================================\n",
      "Line  4 : @SRR4841864.2 2 length=101\n",
      "Line  5 : NAGCTTCGTTAAGACTTTGACTGGTAAGACCATCACTTTGGAAGTTGAATCTTCTGACACCATTGACAATGTCAAGTCCAAGATCCAAGACAAGGAAGGTA\n",
      "Line  6 : +SRR4841864.2 2 length=101\n",
      "Line  7 : #1=BDDDD?CFFFIIEFIFFHFIEFHIBHFFEFEFFIFEFIIFE<<?D?DGFIFIIGFEDFFIEGFFGGCC7@EFE7=AEEEDDDDDC@CCCBBBBBBBA>\n",
      "\n",
      "====================================================\n",
      "Line  8 : @SRR4841864.3 3 length=101\n",
      "Line  9 : NTTATATCTATGAATGAATATGCATTGCTCTTCTGATACTATGGTATGAGAGGCCTTGGTAAAGGGCATCGATAACCGAAAGAATCATCCGCAGAGAAGTA\n",
      "Line 10 : +SRR4841864.3 3 length=101\n",
      "Line 11 : #1=?DDD?F?D8<FEGBABHBA<FHE93AAAHD<AFEG4?:ED<?DD<B4B918B@?FH8BDG?)BDFDHID@6;3=:59=<ACCCA@>CBB8?B253<:3\n"
     ]
    }
   ],
   "source": [
    "with open(os.path.join(DIR_DAT_RAW, \"SRR4841864_1.fastq\"), 'r') as fp:\n",
    "    for cnt, line in enumerate(fp):\n",
    "        line = line.strip()\n",
    "        if cnt % 4 == 0:\n",
    "            print(\"\\n====================================================\")\n",
    "        print(\"Line {0:^3}: {1}\".format(cnt, line))\n",
    "        if cnt > 10:\n",
    "            break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**read the fastq file using my function and double check with the results above**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "@SRR4841864.1 1 length=101\n",
      "NGGCATACCAATGGGAAGAGCATGCGTGGGAATGGTATTCAAAAATCGAGAAAGAAGGATGCTGCTGCTGCTGCCGCTGTTGGGAAAGCTATAAAGGATGA\n",
      "#1:BDFFFDHFHDGGBBGGHGIGGHEHGIFIHGFDB?FHGHIIIDDGFHGCHIIIIIIIIIHGCCCBBDFDFCCECCCCBCCCBBABBCCCCCCECCCCCC\n",
      "\n",
      "======================\n",
      "\n",
      "@SRR4841864.2 2 length=101\n",
      "NAGCTTCGTTAAGACTTTGACTGGTAAGACCATCACTTTGGAAGTTGAATCTTCTGACACCATTGACAATGTCAAGTCCAAGATCCAAGACAAGGAAGGTA\n",
      "#1=BDDDD?CFFFIIEFIFFHFIEFHIBHFFEFEFFIFEFIIFE<<?D?DGFIFIIGFEDFFIEGFFGGCC7@EFE7=AEEEDDDDDC@CCCBBBBBBBA>\n"
     ]
    }
   ],
   "source": [
    "fn  = \"SRR4841864_1.fastq\"          # file name\n",
    "fp  = os.path.join(DIR_DAT_RAW, fn) # file path\n",
    "gen = stream_fastq(fp)              # generator\n",
    "\n",
    "res = next(gen)\n",
    "print(res[\"label\"])\n",
    "print(res[\"seq\"])\n",
    "print(res[\"qscore\"])\n",
    "\n",
    "print(\"\\n======================\\n\")\n",
    "\n",
    "res = next(gen)\n",
    "print(res[\"label\"])\n",
    "print(res[\"seq\"])\n",
    "print(res[\"qscore\"])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
